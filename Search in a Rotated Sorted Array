// brute force
class Solution {
public:
    int pivot(vector<int> &nums, int target) {
        int l = 0, h = nums.size() - 1, mid = 0;

        while(l < h) {
            mid = l + (h - l)/2;
            if(nums[mid] <= nums[h]) {
                h = mid;
            }
            else if(nums[l] <= nums[mid]) {
                l = mid + 1;
            }
        }
        return l;
    }

    int binarySearch(vector<int> &nums, int l, int h, int target) {
        while(l <= h) {
            int mid = l + (h - l)/2;
            if(nums[mid] == target) return mid;
            else if(target > nums[mid]) l = mid + 1;
            else if(target < nums[mid]) h = mid - 1;
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        int point = pivot(nums, target);
        int left = binarySearch(nums, 0, point-1, target);
        int right = binarySearch(nums, point, nums.size() - 1, target);
        
        if(left == -1 && right == -1) return -1;
        if(left != -1) return left;
        return right;
    }
};
